import { describe, it, expect, beforeEach, vi } from 'vitest';
import { screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { render } from '../../utils';
import { Header } from '../../../src/components/layout/Header';
import { AuthContext } from '../../../src/contexts/context';
import type { User } from '../../../src/types';

// AuthContext„ÅÆ„É¢„ÉÉ„ÇØ
const mockAuthContext = {
  user: null as User | null,
  loading: false,
  logout: vi.fn(),
  login: vi.fn(),
  register: vi.fn(),
  updateProfile: vi.fn(),
  refreshToken: vi.fn(),
};

const renderWithAuth = (authOverrides = {}) => {
  const authValue = { ...mockAuthContext, ...authOverrides };
  return render(
    <AuthContext.Provider value={authValue}>
      <Header />
    </AuthContext.Provider>
  );
};

describe('Header', () => {
  beforeEach(() => {
    localStorage.clear();
    vi.clearAllMocks();
  });

  describe('Êú™Ë™çË®ºÁä∂ÊÖã', () => {
    it('„Ç¢„Éó„É™„ÅÆ„É≠„Ç¥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth();
      expect(screen.getByAltText('fragfolio')).toBeInTheDocument();
    });

    it('„É≠„Ç∞„Ç§„É≥„É™„É≥„ÇØ„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth();
      expect(screen.getByRole('link', { name: '„É≠„Ç∞„Ç§„É≥' })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: '„É≠„Ç∞„Ç§„É≥' })).toHaveAttribute(
        'href',
        '/auth'
      );
    });

    it('Ë®ÄË™ûÂàá„ÇäÊõø„Åà„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth();
      expect(screen.getByText('üá∫üá∏ English')).toBeInTheDocument();
    });

    it('„Ç¢„Éó„É™„É≠„Ç¥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth();
      const logo = screen.getByAltText('fragfolio');
      expect(logo).toBeInTheDocument();
      expect(logo).toHaveClass('h-10');
    });
  });

  describe('Ë™çË®ºÊ∏à„ÅøÁä∂ÊÖã', () => {
    const mockUser: User = {
      id: 1,
      name: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
      email: 'test@example.com',
      email_verified_at: '2023-01-01T00:00:00.000Z',
      created_at: '2023-01-01T00:00:00.000Z',
      updated_at: '2023-01-01T00:00:00.000Z',
    };

    it('„É¶„Éº„Ç∂„ÉºÂêç„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth({ user: mockUser });
      expect(screen.getByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº')).toBeInTheDocument();
    });

    it('„É¶„Éº„Ç∂„Éº„ÅÆ„Ç§„Éã„Ç∑„É£„É´„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth({ user: mockUser });
      expect(screen.getByText('„ÉÜ')).toBeInTheDocument();
    });

    it('„É¶„Éº„Ç∂„Éº„É°„Éã„É•„Éº„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const user = userEvent.setup();
      renderWithAuth({ user: mockUser });

      // „É¶„Éº„Ç∂„Éº„É°„Éã„É•„Éº„Éú„Çø„É≥Ôºà„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂê´„ÇÄ„ÇÇ„ÅÆÔºâ„Çí„ÇØ„É™„ÉÉ„ÇØ
      const userButton = screen.getByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº').closest('button');
      expect(userButton).toBeInTheDocument();

      await user.click(userButton!);

      // „Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„É°„Éã„É•„Éº„ÅåÈñã„Åã„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(screen.getByText(mockUser.email)).toBeInTheDocument();
    });

    it('„É≠„Ç∞„Ç§„É≥„É™„É≥„ÇØ„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      renderWithAuth({ user: mockUser });
      expect(screen.queryByRole('link', { name: '„É≠„Ç∞„Ç§„É≥' })).not.toBeInTheDocument();
    });

    it('„É¶„Éº„Ç∂„Éº„É°„Éã„É•„Éº„Åã„ÇâË®≠ÂÆö„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Çã', async () => {
      const user = userEvent.setup();
      renderWithAuth({ user: mockUser });

      // „É¶„Éº„Ç∂„Éº„É°„Éã„É•„Éº„Éú„Çø„É≥Ôºà„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂê´„ÇÄ„ÇÇ„ÅÆÔºâ„Çí„ÇØ„É™„ÉÉ„ÇØ
      const userButton = screen.getByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº').closest('button');
      await user.click(userButton!);

      // Ë®≠ÂÆö„É™„É≥„ÇØ„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByRole('link', { name: /Ë®≠ÂÆö/ })).toBeInTheDocument();
    });

    it('„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅÆÁä∂ÊÖã„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      renderWithAuth({ user: mockUser, loading: true });

      // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅØË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº')).toBeInTheDocument();
    });
  });

  describe('Ë®ÄË™ûÂàá„ÇäÊõø„Åà', () => {
    it('Ëã±Ë™ûÂàá„ÇäÊõø„Åà„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„ÅßËã±Ë™û„Å´Â§âÊõ¥„Åï„Çå„Çã', async () => {
      const user = userEvent.setup();
      renderWithAuth();

      // ÂàùÊúüÁä∂ÊÖã„ÅØÊó•Êú¨Ë™û
      expect(screen.getByText('üá∫üá∏ English')).toBeInTheDocument();
      expect(screen.getByRole('link', { name: '„É≠„Ç∞„Ç§„É≥' })).toBeInTheDocument();

      // Ëã±Ë™û„Å´Âàá„ÇäÊõø„Åà
      await user.click(screen.getByText('üá∫üá∏ English'));

      // Ëã±Ë™ûË°®Á§∫„Å´Â§âÊõ¥„Åï„Çå„Çã
      expect(screen.getByText('üáØüáµ Êó•Êú¨Ë™û')).toBeInTheDocument();
      expect(screen.getByRole('link', { name: 'Login' })).toBeInTheDocument();
    });

    it('Êó•Êú¨Ë™ûÂàá„ÇäÊõø„Åà„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„ÅßÊó•Êú¨Ë™û„Å´Êàª„Çã', async () => {
      const user = userEvent.setup();
      renderWithAuth();

      // Ëã±Ë™û„Å´Âàá„ÇäÊõø„Åà
      await user.click(screen.getByText('üá∫üá∏ English'));
      expect(screen.getByRole('link', { name: 'Login' })).toBeInTheDocument();

      // Êó•Êú¨Ë™û„Å´Êàª„Åô
      await user.click(screen.getByText('üáØüáµ Êó•Êú¨Ë™û'));
      expect(screen.getByRole('link', { name: '„É≠„Ç∞„Ç§„É≥' })).toBeInTheDocument();
    });
  });

  describe('„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥', () => {
    it('ÈÅ©Âàá„Å™CSS„ÇØ„É©„Çπ„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      renderWithAuth();

      const header = screen.getByAltText('fragfolio').closest('header');
      expect(header).toHaveClass('header-nav', 'sticky', 'top-0', 'z-50');

      const container = header?.querySelector('.max-w-7xl');
      expect(container).toHaveClass('max-w-7xl', 'mx-auto', 'px-4');
    });

    it('„Éï„É¨„ÉÉ„ÇØ„Çπ„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      renderWithAuth();

      const header = screen.getByAltText('fragfolio').closest('header');
      const flexContainer = header?.querySelector('.flex.justify-between');
      expect(flexContainer).toHaveClass('flex', 'justify-between', 'h-16');
    });
  });

  describe('„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£', () => {
    it('„Éú„Çø„É≥„Åå„Ç≠„Éº„Éú„Éº„Éâ„Åß„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ', () => {
      renderWithAuth();

      const languageButton = screen.getByText('üá∫üá∏ English');
      expect(languageButton).toBeInTheDocument();
      expect(languageButton.tagName).toBe('BUTTON');
    });

    it('ÈÅ©Âàá„Å™„Çª„Éû„É≥„ÉÜ„Ç£„ÇØ„Çπ„Åå‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      renderWithAuth();

      expect(screen.getByRole('banner')).toBeInTheDocument(); // headerË¶ÅÁ¥†
      expect(screen.getByAltText('fragfolio')).toBeInTheDocument(); // logoË¶ÅÁ¥†
    });
  });
});
